var libarchivejs;(()=>{"use strict";var t={d:(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Archive:()=>r});class s{constructor(t,e,s,r){this._name=t,this._size=e,this._path=s,this._archiveRef=r}get name(){return this._name}get size(){return this._size}extract(){return this._archiveRef.extractSingleFile(this._path)}}class r{static init(t={}){return r._options={workerUrl:"../dist/worker-bundle.js",...t},r._options}static open(t,e=null){return e=e||r._options||r.init()&&console.warn("Automatically initializing using options: ",r._options),new r(t,e).open()}constructor(t,e){this._worker=new Worker(e.workerUrl),this._worker.addEventListener("message",this._workerMsg.bind(this)),this._callbacks=[],this._content={},this._processed=0,this._file=t}async open(){return await this._postMessage({type:"HELLO"},((t,e,s)=>{"READY"===s.type&&t()})),await this._postMessage({type:"OPEN",file:this._file},((t,e,s)=>{"OPENED"===s.type&&t(this)}))}close(){this._worker.terminate(),this._worker=null}hasEncryptedData(){return this._postMessage({type:"CHECK_ENCRYPTION"},((t,e,s)=>{"ENCRYPTION_STATUS"===s.type&&t(s.status)}))}usePassword(t){return this._postMessage({type:"SET_PASSPHRASE",passphrase:t},((t,e,s)=>{"PASSPHRASE_STATUS"===s.type&&t(s.status)}))}getFilesObject(){return this._processed>0?Promise.resolve().then((()=>this._content)):this._postMessage({type:"LIST_FILES"},((t,e,r)=>{if("ENTRY"===r.type){const t=r.entry,[e,i]=this._getProp(this._content,t.path);return"FILE"===t.type&&(e[i]=new s(t.fileName,t.size,t.path,this)),!0}"END"===r.type&&(this._processed=1,t(this._cloneContent(this._content)))}))}getFilesArray(){return this.getFilesObject().then((t=>this._objectToArray(t)))}extractSingleFile(t){if(null===this._worker)throw new Error("Archive already closed");return this._postMessage({type:"EXTRACT_SINGLE_FILE",target:t},((t,e,s)=>{"FILE"===s.type&&t(new File([s.entry.fileData],s.entry.fileName,{type:"application/octet-stream"}))}))}extractFiles(t){return this._processed>1?Promise.resolve().then((()=>this._content)):this._postMessage({type:"EXTRACT_FILES"},((e,s,r)=>{if("ENTRY"===r.type){const[e,s]=this._getProp(this._content,r.entry.path);return"FILE"===r.entry.type&&(e[s]=new File([r.entry.fileData],r.entry.fileName,{type:"application/octet-stream"}),void 0!==t&&setTimeout(t.bind(null,{file:e[s],path:r.entry.path}))),!0}"END"===r.type&&(this._processed=2,this._worker.terminate(),e(this._cloneContent(this._content)))}))}_cloneContent(t){if(t instanceof File||t instanceof s||null===t)return t;const e={};for(const s of Object.keys(t))e[s]=this._cloneContent(t[s]);return e}_objectToArray(t,e=""){const r=[];for(const i of Object.keys(t))t[i]instanceof File||t[i]instanceof s||null===t[i]?r.push({file:t[i]||i,path:e}):r.push(...this._objectToArray(t[i],`${e}${i}/`));return r}_getProp(t,e){const s=e.split("/");""===s[s.length-1]&&s.pop();let r=t,i=null;for(const t of s)r[t]=r[t]||{},i=r,r=r[t];return[i,s[s.length-1]]}_postMessage(t,e){return this._worker.postMessage(t),new Promise(((t,s)=>{this._callbacks.push(this._msgHandler.bind(this,e,t,s))}))}_msgHandler(t,e,s,r){if("BUSY"===r.type)s("worker is busy");else{if("ERROR"!==r.type)return t(e,s,r);s(r.error)}}_workerMsg({data:t}){(0,this._callbacks[this._callbacks.length-1])(t)||this._callbacks.pop()}}libarchivejs=e})();